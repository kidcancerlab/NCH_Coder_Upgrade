
## Library
```{r lib, cache = FALSE}
# Load necessary packages
library(Seurat)
library(tidyverse) # This package contains ggplot2 and dplyr
library(patchwork)
library(ggplot2) # For plotting
library(rrrSingleCellUtils) # For plotting an processing
library(qs) # For reading and writing .qs files
library(harmony) # For Harmony integration
library(crescendo)

# Set the random generator seed so that results are reproducible.
set.seed(132)
```



## load the objects to be merged
In this tutorial, we will demonstrate how to merge two single cell RNA-seq
datasets using the MergeSeurat function in Seurat. Merging single cell RNA-seq 
datasets is a crucial step in the analysis of single cell data. 
It allows researchers to combine data from different sources and 
increase the sample size for more robust and comparative analysis.
Let's say we have many different datasets from different samples or
experiments. We can load the datasets individually and then merge them using
the MergeSeurat function in Seurat. The merged dataset can then be used for
downstream analysis, such as dimensionality reduction, clustering, and
differential expression analysis.

```{r test}

# read in one object
sobj1 <-
    qs::qread("output/rdata_premade/OX1X_sobj_annotated.qs")
sobj1
#list of Seurat objects
sobj_list <-
    qs::qread("output/rdata_premade/scRNA_objs_list.qs")
sobj_list

# merge the Seurat objects
merged_sobj <-
    merge(x= sobj1,
          y = sobj_list[1:length(sobj_list)])

# check the merged Seurat object, you will see layers for each seurat object
merged_sobj

# join the layers so that they are all in the same object
merged_sobj <-
    merged_sobj %>%
    JoinLayers()

# check the object now, the layers are now joined or merged
merged_sobj

# need to re-run the normalization and scaling
merged_sobj <- 
    merged_sobj %>%
    NormalizeData() %>%
    FindVariableFeatures() %>%
    ScaleData()

# run PCA
merged_sobj <- 
    merged_sobj %>%
    RunPCA()

# run UMAP
merged_sobj <- 
    merged_sobj %>%
    RunUMAP(dims = 1:30)

# run clustering
merged_sobj <- 
    merged_sobj %>%
    FindNeighbors(dims = 1:30) %>%
    FindClusters()

# all opf the above steps can be done in one go using pipe function
merged_sobj <-
    merged_sobj %>%
    NormalizeData() %>%
    FindVariableFeatures() %>%
    ScaleData() %>%
    RunPCA() %>%
    RunUMAP(dims = 1:30) %>%
    FindNeighbors(dims = 1:30) %>%
    FindClusters()

# check the object
merged_sobj

# visualize the clusters
DimPlot(merged_sobj,
        group.by = "seurat_clusters",
        label = T,
        repel = T,
        label.box = T) +
    NoLegend()

# assessing the batch effect
DimPlot(merged_sobj,
        group.by = "orig.ident",
        label = T,
        repel = T,
        label.box = T) +
    NoLegend()

DimPlot(merged_sobj,
        group.by = "seurat_clusters",
        split.by = "orig.ident",
        ncol = 6,
        label = T,
        repel = T) +
    NoLegend()

# looks like there is no batch effect


# we also realized that there is no mitochondrial gene in the second object we are loading today
# so we will remove the mitochondrial genes from the merged_sobj for consistency
mito_genes <- 
    grep("^mt-", rownames(merged_sobj), value = TRUE)

merged_sobj <- 
    subset(merged_sobj,
          features = setdiff(rownames(merged_sobj), mito_genes))


```

## Activity
We just found out that there is minimal to no batch effect in the merged object. This could 
be because the samples are from the same tissue and the same experiment and source.
Now, we will load another object from a different experiment and source but still the
same tissue. The actvity is to merge the two objects and check for batch effect.
1. Load the second object
```{r activity1}
# read in the second object
object2 <-
    qs::qread("input/scRNA/comb_sobj_source1.qs")

#save the batch information
object2$batch <- "batch1"

# save the batch information in the merged_sobj as well
merged_sobj$batch <- "batch2"

#merge the two objects and process it together unto plotting dimplot






# assess the batch effect presence






```




## Harmony integration
It is great to see that there is no batch effect in the previous data. But that is 
not always the case. Most of the time, we will see a batch effect in the data because 
of the different samples or experiments. In this case, we can use the Harmony integration
method to remove the batch effect. Harmony is a method for integrating single-cell RNA-seq
data from multiple samples or experiments. It uses a graph-based approach to identify and
remove batch effects while preserving biological variation. Harmony can be used to integrate
data from different sources, such as different tissues, time points, or experimental conditions.
Harmony only corrects batch effect for plotting and visualization purposes. It does not
change the underlying data. So, we will still need to do batch correction in actual data using
other method like deseq2 or limma.

Here we will load another object from a different expertiment and source but still the 
same tissue. We will first merge and assess the presence of batch effect and then run
Harmony integration to remove the batch effect.

```{r harmony_integration}
# read in the second object
object2 <-
    qs::qread("input/scRNA/comb_sobj_source1.qs")

#save the batch information
object2$batch <- "batch1"

# save the batch information in the merged_sobj as well
merged_sobj$batch <- "batch2"

# check the object
merge_all <-
    merge(x = merged_sobj,
          y = object2) %>%
    JoinLayers() %>%
    NormalizeData() %>%
    FindVariableFeatures() %>%
    ScaleData() %>%
    RunPCA() %>%
    RunUMAP(dims = 1:30) %>%
    FindNeighbors(dims = 1:30) %>%
    FindClusters()

# assess the batch effect
DimPlot(merge_all,
        group.by = "batch",
        label = T,
        repel = T,
        label.box = T) +
    NoLegend()

DimPlot(merge_all,
        group.by = "orig.ident",
        label = T,
        #repel = T,
        label.box = T) +
    NoLegend()


# run Harmony integration
merge_all_harmony1 <-
    merge_all %>%
    RunHarmony(group.by.vars = "batch") %>%
    RunUMAP(reduction = "harmony", dims = 1:30) %>%
    FindNeighbors(reduction = "harmony", dims = 1:30) %>%
    FindClusters() 

# check the integration
DimPlot(merge_all_harmony1,
        group.by = "batch",
        label = T,
        repel = T,
        label.box = T) +
    NoLegend()

# run Harmony integration with different parameters
merge_all_harmony2 <-
    merge_all %>%
    RunHarmony(group.by.vars = "batch",
               theta = 4) %>%
    RunUMAP(reduction = "harmony", dims = 1:30) %>%
    FindNeighbors(reduction = "harmony", dims = 1:30) %>%
    FindClusters()

# check the integration
DimPlot(merge_all_harmony2,
        group.by = "orig.ident",
        label = T,
        repel = T,
        label.box = T) +
    NoLegend()
DimPlot(merge_all_harmony2,
        group.by = "batch",
        label = T,
        repel = T,
        label.box = T) +
    NoLegend()
```



## Activity2
In this activity, we will run harmony integration with different parameters/batch.
Use orig.ident as batch variable and see how the integration works.
```{r activity2}

#simply use the same code as above but change the batch variable to orig.ident






# check the integration






# run Harmony integration with orig.ident as batch variable and theta value of your preference
# you can also try using multiple theta each time, low and high and see how it works







```



# run harmony integration with different parameters like multiple batches
Harmony intergration can also be done with multiple batches. Most of the other integration methods
like Seurat and Scanpy can only do one batch at a time. But Harmony can do multiple batches at once.

```{r two_batch_variables}
# run Harmony integration with multiple batch variables
merge_all_harmony3 <-
    merge_all %>%
    RunHarmony(group.by.vars = c("batch", "orig.ident")) %>%
    RunUMAP(reduction = "harmony", dims = 1:30) %>%
    FindNeighbors(reduction = "harmony", dims = 1:30) %>%
    FindClusters()

# check the integration
DimPlot(merge_all_harmony3,
        group.by = "orig.ident",
        label = T,
        repel = T,
        label.box = T) +
    NoLegend()

# change theta
merge_all_harmony4 <-
    merge_all %>%
    RunHarmony(group.by.vars = c("batch", "orig.ident"),
                theta = c(5, 5)) %>%
    RunUMAP(reduction = "harmony", dims = 1:30) %>%
    FindNeighbors(reduction = "harmony", dims = 1:30) %>%
    FindClusters()

# check the integration
DimPlot(merge_all_harmony4,
        group.by = "orig.ident",
        label = T,
        repel = T,
        label.box = T) +
    NoLegend()

DimPlot(merge_all_harmony4,
        group.by = "batch",
        label = T,
        repel = T,
        label.box = T) +
    NoLegend()

# there are opportunities to explore more of the harmony parameters such as lambda and tau.
# you can also try using multiple theta each time, low and high and see how it works.
# you can also try using multiple lambda each time, low and high and see how it works.


```

## Crescendo
Crescendo is a new method for integrating single-cell RNA-seq data, developed by the 
same lab as Harmony. While harmony does not correct the expression data, Crescendo does.
Crescendo can only take one batch variable at a time.
It takes long time to run so we will subset one sample from each batch and try to 
do the integration.

```{r crescendo}
# subset the data
merge_all_sub <-
    merge_all %>%
    subset(orig.ident == "GSM6925136_OX4X" | orig.ident == "HY" | orig.ident == "MB")

# check the object
merge_all_sub

# reprocess the data
merge_all_sub <-
    merge_all_sub %>%
    NormalizeData() %>%
    FindVariableFeatures() %>%
    ScaleData() %>%
    RunPCA() %>%
    RunHarmony(group.by.vars = "orig.ident") %>%
    RunUMAP(dims = 1:30,
            reduction = "harmony") %>%
    FindNeighbors(dims = 1:30,
                  reduction = "harmony") %>%
    FindClusters()


# check the batch effect
DimPlot(merge_all_sub,
        group.by = "orig.ident",
        label = T,
        repel = T,
        label.box = T) +
    NoLegend()

DimPlot(merge_all_sub,
        group.by = "batch",
        label = T,
        repel = T,
        label.box = T) +
    NoLegend()

# run crescendo integration
merge_all_sub$nUMI <- merge_all_sub$nCount_RNA
corr_counts <-
    crescendo(Ycounts = GetAssayData(merge_all_sub, layer = 'counts'), # genes by cells
              meta_data = merge_all_sub@meta.data,
              R = t(Embeddings(merge_all_sub, reduction = "harmony")), # dims by cells
              batch_var = "orig.ident",
              alpha = 0,
              mc.cores = 15,
              return_obj = TRUE,
              verbose = TRUE
    )


# create sobj
cres_obj <-
    CreateSeuratObject(counts = t(corr_counts$corrected_matching),
                       meta.data = merge_all_sub@meta.data) %>%
    NormalizeData() %>%
    FindVariableFeatures() %>%
    ScaleData() %>%
    RunPCA() %>%
    RunUMAP(dims = 1:30) %>%
    FindNeighbors(dims = 1:30) %>%
    FindClusters()

    

    

# if this takes too long just have an object fort visualization

stuff2 <-
    CreateSeuratObject(
        counts = t(corr_counts$corrected_matching),
        meta.data = mm_mets@meta.data
    ) %>%
    process_seurat()

mm_mets_uncorr <-
    mm_mets %>%
    process_seurat()


```
