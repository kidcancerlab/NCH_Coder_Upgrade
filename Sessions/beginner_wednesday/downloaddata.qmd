

# Downloading data
---
title: "Creating additional Seurat Objects"
output: html_notebook
---

```{r library_to_download}
# Load necessary packages
library(Seurat)
library(tidyverse) # This package contains ggplot2 and dplyr
library(patchwork)
library(ggplot2) # For plotting
library(rrrSingleCellUtils) # For plotting an processing
library(qs) # For reading and writing .qs files
library(SingleR) # For cell type annotation
library(biomaRt) # For gene annotation
library(harmony) # For harmony
# Set the random generator seed so that results are reproducible.
set.seed(132)

```


# 4 h5ad datasets were downloaded from 
https://allen-brain-cell-atlas.s3.us-west-2.amazonaws.com/index.html#expression_matrices/WMB-10Xv2/20230630/. 
#TH - thalamus, MB - midbrain, CTXsp - cortical subplate, HY - hypothalamus. 

## Create Seurat objects from the h5ad data. Preprocess each of the objects and downsample them. Each of the object is filtered using diferent filtering cutoffs. 

# Process CTXsp object
```{r}
ctx <- 
    read_h5ad("~/Projects/2025_workshop/WMB-10Xv2-CTXsp-raw.h5ad")

ctx_obj <- 
    CreateSeuratObject(
    counts = t(as.matrix(ctx$X)),
    meta.data = ctx$obs,
    min.features = 200,
    min.cells = 3,
    project = "CTX"
)

ctx_obj <- 
    PercentageFeatureSet(ctx_obj, 
                        pattern = "^mt",
                        col.name = "percent.mt")

# Plot histograms for quality control
hist(ctx_obj@meta.data$nFeature_RNA)
hist(ctx_obj@meta.data$nCount_RNA)
hist(ctx_obj@meta.data$percent.mt)

# Subset based on quality control metrics
ctx_obj <- subset(
    ctx_obj,
    subset = nFeature_RNA > 500 &
        nCount_RNA < 20000 &
        percent.mt < 5
)

# Normalize and preprocess data
ctx_obj <- 
    ctx_obj %>%
    NormalizeData(normalization.method = "LogNormalize", scale.factor = 10000) %>%
    FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
    ScaleData(features = rownames(ctx_obj)) %>%
    RunPCA(features = VariableFeatures(object = ctx_obj)) %>%
    FindNeighbors(dims = 1:10) %>%
    FindClusters(resolution = 0.1) %>%
    RunUMAP(dims = 1:10)

# Visualize and save downsampled object
DimPlot(ctx_obj)
ctx_obj_subset <- subset(ctx_obj, downsample = 200)
DimPlot(ctx_obj_subset)
saveRDS(ctx_obj_subset, "ctx_obj_downsampled.rds")
```

# Process CTXsp object
```{r}
# Process MB object
mb <- read_h5ad("~/Projects/2025_workshop/WMB-10Xv2-MB-raw.h5ad")

mb_obj <- CreateSeuratObject(
    counts = t(as.matrix(mb$X)),
    meta.data = mb$obs,
    min.features = 200,
    min.cells = 3,
    project = "MB"
)

mb_obj <- 
    PercentageFeatureSet(mb_obj,
                        pattern = "^mt",
                        col.name = "percent.mt")

# Plot histograms for quality control
hist(mb_obj@meta.data$nFeature_RNA)
hist(mb_obj@meta.data$nCount_RNA)
hist(mb_obj@meta.data$percent.mt)

# Subset based on quality control metrics
mb_obj <- subset(
    mb_obj,
    subset = nFeature_RNA > 500 &
        nCount_RNA < 20000 &
        percent.mt < 5
)

# Normalize and preprocess data
mb_obj <- 
    mb_obj %>%
    NormalizeData(normalization.method = "LogNormalize", scale.factor = 10000) %>%
    FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
    ScaleData(features = rownames(mb_obj)) %>%
    RunPCA(features = VariableFeatures(object = mb_obj)) %>%
    FindNeighbors(dims = 1:10) %>%
    FindClusters(resolution = 0.1) %>%
    RunUMAP(dims = 1:10)

# Visualize and save downsampled object
DimPlot(mb_obj)
mb_obj_subset <- subset(mb_obj, downsample = 200)
DimPlot(mb_obj_subset)
saveRDS(mb_obj_subset, "mb_obj_downsampled.rds")

## Repeat with the HY object. 
```

```{r}
hy <- read_h5ad("~/Projects/2025_workshop/WMB-10Xv2-HY-raw.h5ad")

hy_obj <- 
    CreateSeuratObject(
    counts = t(as.matrix(hy$X)),
    meta.data = hy$obs,
    min.features = 200,
    min.cells = 3,
    project = "HY"
)

hy_obj <- 
    PercentageFeatureSet(hy_obj,
                        pattern = "^mt",
                        col.name = "percent.mt")

hist(hy_obj@meta.data$nFeature_RNA)
hist(hy_obj@meta.data$nCount_RNA)
hist(hy_obj@meta.data$percent.mt)

hy_obj <- subset(
    hy_obj,
    subset = nFeature_RNA > 500 &
        nCount_RNA < 20000 &
        percent.mt < 5
)

hy_obj <- 
    hy_obj %>%
    NormalizeData(normalization.method = "LogNormalize", scale.factor = 10000) %>%
    FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
    ScaleData(features = rownames(hy_obj)) %>%
    RunPCA(features = VariableFeatures(object = hy_obj)) %>%
    FindNeighbors(dims = 1:10) %>%
    FindClusters(resolution = 0.1) %>%
    RunUMAP(dims = 1:10)

DimPlot(hy_obj)

hy_obj_subset <- subset(hy_obj, downsample = 200)

DimPlot(hy_obj_subset)

saveRDS(hy_obj_subset, "hy_obj_downsampled.rds")
```

## Repeat with the TH specimen. 

```{r}
th <- read_h5ad("~/Projects/2025_workshop/WMB-10Xv2-TH-raw.h5ad")

th_obj <- CreateSeuratObject(
    counts = t(as.matrix(th$X)),
    meta.data = th$obs,
    min.features = 200,
    min.cells = 3,
    project = "TH"
)

th_obj <- 
    PercentageFeatureSet(th_obj,
                        pattern = "^mt",
                        col.name = "percent.mt")

hist(th_obj@meta.data$nFeature_RNA)
hist(th_obj@meta.data$nCount_RNA)
hist(th_obj@meta.data$percent.mt)

VlnPlot(th_obj, features = c("percent.mt", "nFeature_RNA", "nCount_RNA"))

th_obj <- subset(
    th_obj,
    subset = nFeature_RNA > 500 &
        nCount_RNA < 30000 &
        percent.mt < 5
)

th_obj <- 
    th_obj %>%
    NormalizeData(normalization.method = "LogNormalize", scale.factor = 10000) %>%
    FindVariableFeatures(selection.method = "vst", nfeatures = 2000) %>%
    ScaleData(features = rownames(th_obj)) %>%
    RunPCA(features = VariableFeatures(object = th_obj)) %>%
    FindNeighbors(dims = 1:10) %>%
    FindClusters(resolution = 0.1) %>%
    RunUMAP(dims = 1:10)

DimPlot(th_obj)

th_obj_subset <- subset(th_obj, downsample = 200)

DimPlot(th_obj_subset)

saveRDS(th_obj_subset, "~/Projects/2025_workshop/th_obj_downsampled.rds")
```

```{r}

obj1 <-
    readRDS("/gpfs0/scratch/luda_to_yogesh/th_obj_downsampled.rds")
obj2 <-
    readRDS("/gpfs0/scratch/luda_to_yogesh/mb_obj_downsampled.rds")
obj3 <-
    readRDS("/gpfs0/scratch/luda_to_yogesh/hy_obj_downsampled.rds")
obj4 <-
    readRDS("/gpfs0/scratch/luda_to_yogesh/ctx_obj_downsampled.rds")

mart = useMart("ensembl")

mart = useDataset("mmusculus_gene_ensembl", mart)
list_new <-
    list(obj1, obj2, obj3, obj4)
new_list_obj <- list()

for (item in list_new) {
    matrix <- 
        GetAssayData(item,
                     layer = "counts")
    
    gene_symbol <- 
        biomaRt::getBM(
        attributes = c("ensembl_gene_id", "mgi_symbol"),
        filters = "ensembl_gene_id",
        values = rownames(matrix),
        mart = mart
    )
    
    matrix_new <- 
        matrix %>%
        as.data.frame() %>%
        rownames_to_column(var = "ensembl_gene_id") %>%
        left_join(gene_symbol) %>%
        dplyr::group_by(mgi_symbol) %>%
        slice_head(n = 1) %>%
        filter(!is.na(mgi_symbol)) %>%
        filter(mgi_symbol != "") %>%
        column_to_rownames(var = "mgi_symbol") %>%
        dplyr::select(-ensembl_gene_id) %>%
        as.matrix()
    
    seurat_object <- 
        CreateSeuratObject(
        counts = matrix_new,
        meta.data = item@meta.data)
    
    new_list_obj <- 
        append(new_list_obj, list(seurat_object))
}

# check the object
combine_obj <-
    merge(x = new_list_obj[[1]],
          y = new_list_obj[2:length(new_list_obj)],
          add.cell.ids = c("obj1", "obj2", "obj3", "obj4"),
          project = "combined")

# join layer and process
combine_obj <-
    combine_obj %>%
    JoinLayers() %>%
    NormalizeData() %>%
    FindVariableFeatures() %>%
    ScaleData() %>%
    RunPCA() %>%
    RunUMAP(dims = 1:20) %>%
    FindNeighbors() %>%
    FindClusters()

# run harmony, you can run hrmony now or after annotation
harm_obj <-
    RunHarmony(combine_obj,
               group.by.vars = "orig.ident")

harm_obj <-
    RunUMAP(harm_obj,
            reduction = "harmony",
            dims = 1:20) %>%
    FindNeighbors(reduction = "harmony",
                  dims = 1:20) %>%
    FindClusters()

# reference data
brain_ref_data <- 
    qs::qread("output/rdata_premade/mouse_brain_ref_data.qs")
 
# singleR annotation
annotation <-
    SingleR(test = as.SingleCellExperiment(harm_obj),
            ref = GetAssayData(brain_ref_data),
            labels = brain_ref_data$cell_type,
            aggr.ref = TRUE)
 
# check the object
harm_obj$SingleR_annotation <- annotation$labels
 
# cell scores
harm_obj$SingleR_scores <- 
    apply(X = annotation$scores,
          MARGIN = 1,
          function(x) max(x, na.rm = TRUE))

DimPlot(harm_obj,
        group.by = "SingleR_annotation",
        label = TRUE,
        label.box = T) +
    NoLegend() 

```